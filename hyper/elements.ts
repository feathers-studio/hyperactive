// This file was generated by a script.
// Do not manually edit this file.

import { elements } from "./element.ts";

/**
 * Together with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a MDN | a}
 */
export const a = elements.a;

/**
 * Represents an abbreviation or acronym.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr MDN | abbr}
 */
export const abbr = elements.abbr;

/**
 * Indicates that the enclosed HTML provides contact information for a person or people, or for an organization.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address MDN | address}
 */
export const address = elements.address;

/**
 * Defines an area inside an image map that has predefined clickable areas. An `<em>`image map`</em>` allows geometric areas on an image to be associated with [hyperlink](https://developer.mozilla.org/en-US/docs/Glossary/Hyperlink).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area MDN | area}
 */
export const area = elements.area;

/**
 * Represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include a forum post, a magazine or newspaper article, a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article MDN | article}
 */
export const article = elements.article;

/**
 * Represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside MDN | aside}
 */
export const aside = elements.aside;

/**
 * Used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio MDN | audio}
 */
export const audio = elements.audio;

/**
 * Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use `<b>` for styling text or granting importance. If you wish to create boldface text, you should use the CSS [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) property. If you wish to indicate an element is of special importance, you should use the strong element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b MDN | b}
 */
export const b = elements.b;

/**
 * Specifies the base URL to use for all relative URLs in a document. There can be only one such element in a document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base MDN | base}
 */
export const base = elements.base;

/**
 * Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi MDN | bdi}
 */
export const bdi = elements.bdi;

/**
 * Overrides the current directionality of text, so that the text within is rendered in a different direction.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo MDN | bdo}
 */
export const bdo = elements.bdo;

/**
 * Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the [`<cite>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote MDN | blockquote}
 */
export const blockquote = elements.blockquote;

/**
 * represents the content of an HTML document. There can be only one such element in a document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body MDN | body}
 */
export const body = elements.body;

/**
 * Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br MDN | br}
 */
export const br = elements.br;

/**
 * An interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it performs an action, such as submitting a [form](https://developer.mozilla.org/en-US/docs/Learn/Forms) or opening a dialog.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button MDN | button}
 */
export const button = elements.button;

/**
 * Container element to use with either the [canvas scripting API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) or the [WebGL API](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) to draw graphics and animations.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas MDN | canvas}
 */
export const canvas = elements.canvas;

/**
 * Specifies the caption (or title) of a table.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption MDN | caption}
 */
export const caption = elements.caption;

/**
 * Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite MDN | cite}
 */
export const cite = elements.cite;

/**
 * Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code MDN | code}
 */
export const code = elements.code;

/**
 * Defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col MDN | col}
 */
export const col = elements.col;

/**
 * Defines a group of columns within a table.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup MDN | colgroup}
 */
export const colgroup = elements.colgroup;

/**
 * Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the`<time>` element must be used.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data MDN | data}
 */
export const data = elements.data;

/**
 * Contains a set of [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option) elements that represent the permissible or recommended options available to choose from within other controls.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist MDN | datalist}
 */
export const datalist = elements.datalist;

/**
 * Provides the description, definition, or value for the preceding term ([`<dt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt)) in a description list ([`<dl>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl)).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd MDN | dd}
 */
export const dd = elements.dd;

/**
 * Represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The `<ins>` element can be used for the opposite purpose: to indicate text that has been added to the document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del MDN | del}
 */
export const del = elements.del;

/**
 * Creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details MDN | details}
 */
export const details = elements.details;

/**
 * Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor [`<p>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) element, the [`<dt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt)/[`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) pairing, or the nearest section ancestor of the `<dfn>` element, is considered to be the definition of the term.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn MDN | dfn}
 */
export const dfn = elements.dfn;

/**
 * Represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog MDN | dialog}
 */
export const dialog = elements.dialog;

/**
 * The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like [flexbox](https://developer.mozilla.org/en-US/docs/Glossary/Flexbox) is applied to its parent element).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div MDN | div}
 */
export const div = elements.div;

/**
 * Represents a description list. The element encloses a list of groups of terms (specified using the [`<dt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt) element) and descriptions (provided by [`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl MDN | dl}
 */
export const dl = elements.dl;

/**
 * Specifies a term in a description or definition list, and as such must be used inside a [`<dl>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl) element. It is usually followed by a [`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) element; however, multiple `<dt>` elements in a row indicate several terms that are all defined by the immediate next [`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt MDN | dt}
 */
export const dt = elements.dt;

/**
 * Marks text that has stress emphasis. The `<em>` element can be nested, with each nesting level indicating a greater degree of emphasis.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em MDN | em}
 */
export const em = elements.em;

/**
 * Embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed MDN | embed}
 */
export const embed = elements.embed;

/**
 * Used to group several controls as well as labels ([`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label)) within a web form.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset MDN | fieldset}
 */
export const fieldset = elements.fieldset;

/**
 * Represents a caption or legend describing the rest of the contents of its parent [`<figure>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption MDN | figcaption}
 */
export const figcaption = elements.figcaption;

/**
 * Represents self-contained content, potentially with an optional caption, which is specified using the [`<figcaption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption) element. The figure, its caption, and its contents are referenced as a single unit.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure MDN | figure}
 */
export const figure = elements.figure;

/**
 * Represents a footer for its nearest ancestor [sectioning content](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#sectioning_content) or [sectioning root](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) element. A `<footer>` typically contains information about the author of the section, copyright data, or links to related documents.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer MDN | footer}
 */
export const footer = elements.footer;

/**
 * Represents a document section containing interactive controls for submitting information.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form MDN | form}
 */
export const form = elements.form;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h1}
 */
export const h1 = elements.h1;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h2}
 */
export const h2 = elements.h2;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h3}
 */
export const h3 = elements.h3;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h4}
 */
export const h4 = elements.h4;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h5}
 */
export const h5 = elements.h5;

/**
 * Represent six levels of section headings. `<h1>` is the highest section level and `<h6>` is the lowest.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements MDN | h6}
 */
export const h6 = elements.h6;

/**
 * Contains machine-readable information (metadata) about the document, like its [title](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title), [scripts](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script), and [style sheets](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head MDN | head}
 */
export const head = elements.head;

/**
 * Represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header MDN | header}
 */
export const header = elements.header;

/**
 * Represents a heading grouped with any secondary content, such as subheadings, an alternative title, or a tagline.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup MDN | hgroup}
 */
export const hgroup = elements.hgroup;

/**
 * Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr MDN | hr}
 */
export const hr = elements.hr;

/**
 * Represents the root (top-level element) of an HTML document, so it is also referred to as the `<em>`root element`</em>`. All other elements must be descendants of this element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html MDN | html}
 */
export const html = elements.html;

/**
 * Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the `<i>` naming of this element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i MDN | i}
 */
export const i = elements.i;

/**
 * Represents a nested browsing context, embedding another HTML page into the current one.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe MDN | iframe}
 */
export const iframe = elements.iframe;

/**
 * Embeds an image into the document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img MDN | img}
 */
export const img = elements.img;

/**
 * Used to create interactive controls for web-based forms to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The `<input>` element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input MDN | input}
 */
export const input = elements.input;

/**
 * Represents a range of text that has been added to a document. You can use the `<del>` element to similarly represent a range of text that has been deleted from the document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins MDN | ins}
 */
export const ins = elements.ins;

/**
 * Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a `<kbd>` element using its default monospace font, although this is not mandated by the HTML standard.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd MDN | kbd}
 */
export const kbd = elements.kbd;

/**
 * Represents a caption for an item in a user interface.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label MDN | label}
 */
export const label = elements.label;

/**
 * Represents a caption for the content of its parent [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend MDN | legend}
 */
export const legend = elements.legend;

/**
 * Represents an item in a list. It must be contained in a parent element: an ordered list ([`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol)), an unordered list ([`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)), or a menu ([`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu)). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li MDN | li}
 */
export const li = elements.li;

/**
 * Specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link MDN | link}
 */
export const link = elements.link;

/**
 * Represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main MDN | main}
 */
export const main = elements.main;

/**
 * Used with [`<area>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area) elements to define an image map (a clickable link area).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map MDN | map}
 */
export const map = elements.map;

/**
 * Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark MDN | mark}
 */
export const mark = elements.mark;

/**
 * The top-level element in MathML. Every valid MathML instance must be wrapped in it. In addition, you must not nest a second `<math>` element in another, but you can have an arbitrary number of other child elements in it.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/MathML/Element/math MDN | math}
 */
export const math = elements.math;

/**
 * A semantic alternative to [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul), but treated by browsers (and exposed through the accessibility tree) as no different than [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul). It represents an unordered list of items (which are represented by [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) elements).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu MDN | menu}
 */
export const menu = elements.menu;

/**
 * Represents [metadata](https://developer.mozilla.org/en-US/docs/Glossary/Metadata) that cannot be represented by other HTML meta-related elements, like [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base), [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link), [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script), [`<style>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style) and [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta MDN | meta}
 */
export const meta = elements.meta;

/**
 * Represents either a scalar value within a known range or a fractional value.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter MDN | meter}
 */
export const meter = elements.meter;

/**
 * Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav MDN | nav}
 */
export const nav = elements.nav;

/**
 * Defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript MDN | noscript}
 */
export const noscript = elements.noscript;

/**
 * Represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object MDN | object}
 */
export const object = elements.object;

/**
 * Represents an ordered list of items — typically rendered as a numbered list.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol MDN | ol}
 */
export const ol = elements.ol;

/**
 * Creates a grouping of options within a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup MDN | optgroup}
 */
export const optgroup = elements.optgroup;

/**
 * Used to define an item contained in a select, an [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup), or a [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist) element. As such, `<option>` can represent menu items in popups and other lists of items in an HTML document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option MDN | option}
 */
export const option = elements.option;

/**
 * Container element into which a site or app can inject the results of a calculation or the outcome of a user action.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output MDN | output}
 */
export const output = elements.output;

/**
 * Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p MDN | p}
 */
export const p = elements.p;

/**
 * Contains zero or more [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source) elements and one [`<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) element to offer alternative versions of an image for different display/device scenarios.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture MDN | picture}
 */
export const picture = elements.picture;

/**
 * Enables the embedding of another HTML page into the current one to enable smoother navigation into new pages.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal MDN | portal}
 */
export const portal = elements.portal;

/**
 * Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or [monospaced](https://en.wikipedia.org/wiki/Monospaced_font%22%20class=%22external%22%20target=%22_blank), font. Whitespace inside this element is displayed as written.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre MDN | pre}
 */
export const pre = elements.pre;

/**
 * Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress MDN | progress}
 */
export const progress = elements.progress;

/**
 * Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the [`<blockquote>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q MDN | q}
 */
export const q = elements.q;

/**
 * Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the [`<ruby>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) element. One `<rp>` element should enclose each of the opening and closing parentheses that wrap the [`<rt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt) element that contains the annotation's text.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp MDN | rp}
 */
export const rp = elements.rp;

/**
 * Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The `<rt>` element must always be contained within a [`<ruby>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt MDN | rt}
 */
export const rt = elements.rt;

/**
 * Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby MDN | ruby}
 */
export const ruby = elements.ruby;

/**
 * Renders text with a strikethrough, or a line through it. Use the `<s>` element to represent things that are no longer relevant or no longer accurate. However, `<s>` is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s MDN | s}
 */
export const s = elements.s;

/**
 * Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)%22%20class=%22external%22%20target=%22_blank) or Lucida Console).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp MDN | samp}
 */
export const samp = elements.samp;

/**
 * Used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The `<script>` element can also be used with other languages, such as [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API)'s GLSL shader programming language and [JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script MDN | script}
 */
export const script = elements.script;

/**
 * Represents a part that contains a set of form controls or other content related to performing a search or filtering operation.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search MDN | search}
 */
export const search = elements.search;

/**
 * Represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section MDN | section}
 */
export const section = elements.section;

/**
 * Represents a control that provides a menu of options.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select MDN | select}
 */
export const select = elements.select;

/**
 * Part of the [Web Components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components) technology suite, this element is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot MDN | slot}
 */
export const slot = elements.slot;

/**
 * Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from small to x-small.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small MDN | small}
 */
export const small = elements.small;

/**
 * Specifies multiple media resources for the picture, the audio element, or the video element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for [image file formats](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types) and [media file formats](https://developer.mozilla.org/en-US/docs/Web/Media/Formats).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source MDN | source}
 */
export const source = elements.source;

/**
 * A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. `<span>` is very much like a div element, but div is a [block-level element](https://developer.mozilla.org/en-US/docs/Glossary/Block-level_content) whereas a `<span>` is an [inline-level element](https://developer.mozilla.org/en-US/docs/Glossary/Inline-level_content).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span MDN | span}
 */
export const span = elements.span;

/**
 * Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong MDN | strong}
 */
export const strong = elements.strong;

/**
 * Contains style information for a document or part of a document. It contains CSS, which is applied to the contents of the document containing this element.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style MDN | style}
 */
export const style = elements.style;

/**
 * Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub MDN | sub}
 */
export const sub = elements.sub;

/**
 * Specifies a summary, caption, or legend for a details element's disclosure box. Clicking the `<summary>` element toggles the state of the parent [`<details>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details) element open and closed.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary MDN | summary}
 */
export const summary = elements.summary;

/**
 * Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup MDN | sup}
 */
export const sup = elements.sup;

/**
 * Container defining a new coordinate system and [viewport](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox). It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg MDN | svg}
 */
export const svg = elements.svg;

/**
 * Represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table MDN | table}
 */
export const table = elements.table;

/**
 * Encapsulates a set of table rows ([`<tr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) elements), indicating that they comprise the body of the table ([`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody MDN | tbody}
 */
export const tbody = elements.tbody;

/**
 * Defines a cell of a table that contains data. It participates in the `<em>`table model`</em>`.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td MDN | td}
 */
export const td = elements.td;

/**
 * A mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template MDN | template}
 */
export const template = elements.template;

/**
 * Represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example, a comment on a review or feedback form.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea MDN | textarea}
 */
export const textarea = elements.textarea;

/**
 * Defines a set of rows summarizing the columns of the table.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot MDN | tfoot}
 */
export const tfoot = elements.tfoot;

/**
 * Defines a cell as a header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th MDN | th}
 */
export const th = elements.th;

/**
 * Defines a set of rows defining the head of the columns of the table.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead MDN | thead}
 */
export const thead = elements.thead;

/**
 * Represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time MDN | time}
 */
export const time = elements.time;

/**
 * Defines the document's title that is shown in a [browser](https://developer.mozilla.org/en-US/docs/Glossary/Browser)'s title bar or a page's tab. It only contains text; tags within the element are ignored.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title MDN | title}
 */
export const title = elements.title;

/**
 * Defines a row of cells in a table. The row's cells can then be established using a mix of [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) (data cell) and [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th) (header cell) elements.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr MDN | tr}
 */
export const tr = elements.tr;

/**
 * Used as a child of the media elements, audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in [WebVTT format](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API) (.vtt files)—Web Video Text Tracks.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track MDN | track}
 */
export const track = elements.track;

/**
 * Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline but may be altered using CSS.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u MDN | u}
 */
export const u = elements.u;

/**
 * Represents an unordered list of items, typically rendered as a bulleted list.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul MDN | ul}
 */
export const ul = elements.ul;

/**
 * Embeds a media player which supports video playback into the document. You can also use `<video>` for audio content, but the audio element may provide a more appropriate user experience.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video MDN | video}
 */
export const video = elements.video;

/**
 * Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr MDN | wbr}
 */
export const wbr = elements.wbr;
